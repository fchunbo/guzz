
== FAQ  ==

<wiki:toc max_depth="3" />

== 选型问题 ==

=== 与 Mysqlproxy, Amoeba等方案相比有什么优势？===

 Mysqlproxy, Amoeba属于代理中间件方案，中间件方案的优点是程序不用改动，但缺点是：事务不好控制，数据流向不好控制，中间件自身的单点问题等。
 
 而中间件大多数是基于C/C++语言开发的，对于java开发人员，进行定制和维护的难度较高，guzz则相对容易。
 
  所以，从中间件的特点和人员方面考虑，如果您的团队在DBA和C++方向很强，可以考虑维护中间件方案（如Amoeba）；如果java团队很强，guzz则是更好方案，因为万一不行还能定制，自己动手改。
  
 而如果选择了中间件方案，一旦数据出现问题，没有强力的DBA团队，可能从中间件自动分拆的数据库中恢复出原始数据都很困难，在数据安全上可能会存在较高风险。

 另外，guzz和中间件方案不在同一架构层，非排斥关系，可以一起使用。
 
 例如Amoeba支持分库分表后数据的join查询，而guzz没有这类功能；如果用户需要用到，则可以同时使用guzz和Amoeba，让guzz连接Amoeba，Amoeba再连接后端的多台数据库，进行数据的分拆和合并查询。


=== guzz是为大型项目设计的，可以用于中小型项目吗？===

 可以。
 
 guzz拥有大型项目的数据层架构，这种架构是透明的，与其他框架相比，并不会增加中小型项目的开发成本，因此可以选择。对于中小型项目，选择guzz后，如果以后项目发展成大型项目或者大数据量项目，代码重构风险可以降低很多。


=== 我在项目中引入guzz，怎么最快让大家看到效果？===

 引入guzz jsp taglib。将guzz配置起来，其他代码不用变，将主要的领域对象提取和显示交由guzz taglib完成，不写一行java代码快速完成大部分的前后台页面开发（修改）工作，效果会非常明显。同样的工作，能够快2-3倍。


== 分库分表 ==

=== 什么是分库和自动的分布式事务？===

 分库我们称之为分库。
 
 shard是指把1个库里的多张表分散到多台数据库上，如用户资料放在数据库1，短消息放到数据库2，其他放到数据库3。当1个短消息到达时，需要更新库1的短消息统计，往库2写入短消息，往库3写入日志等等，分布式事务是指对这3台数据库的操作，guzz可以自动保证原子执行。

 shard做的是将不同的表分到不同的物理数据库中，不涉及同1张表的分切。对于同一张的分切，我们现在使用的有自定义调查，每次调查1张表。具体可以看下：[http://guzz.javaeye.com/blog/638931]


=== 表的分切（shadow），之后。能支持join操作吗？===

 支持。
 
 进行多表查询需要自己编写sql语句，需要join那些表，sql效率如何完全由开发者或DBA决定。因为shadow策略是项目自己定义的，guzz并不知道实际有多少表，数据是如何分布的，所有也不可能进行自动遍历。所有可能牵涉到性能攸关的地方，guzz一般会自动降低设计等级，由类似hibernate的接口转入类似ibatis的接口，以方便程序更好的控制。具体使用方式：[http://code.google.com/p/guzz/wiki/TutorialCustomTable?wl=zh-Hans#案例说明：多表查询]


=== 表的分切（shadow）是否也可以和shard技术融合，切分后的多张小表分布在不同的数据库组中？===

 支持，请看 [TutorialVirtualDB] 一章介绍。

 注意： 这种功能可能会造成数据库表分散的非常复杂，最后连DBA都晕，使用前请做好规划。


=== 分到不同库中的表如何进行查询结果合并，做join等？===


 简单的说，需要靠自己，根据自身需求决定策略。
 
 一般来说，不同的应用类型和功能对应不同的策略。常见的有：
 
 a. 根据不同的数据维度，将数据存储多份，将可能需要合并查询的数据按照可能的查询条件存放在一张库甚至一张表中，避免跨库跨表查询的可能性。

 b. 利用某些数据库自身的高级功能，如attach远程离线数据库，通过跨库的sql语句完成查询。
 
 c. 通过后台任务，定时将要可能查询的数据（对应查询条件基本固定的情况）从不同的库中读出，存放到临时表中。读取时，从临时表查询。
 
 d. 程序查询时，从多个数据库和表中查询，由程序自身完成结果集合并。
 
 e. 在数据库前，增加某些支持数据合并的中间件（如 Amoeba），guzz通过连接这些中间件而不是直接的数据库，获得归并结果集的支持。
 
 f. 可能这些查询并不适合在关系数据库中完成，考虑使用lucene检索或NoSQL等其他技术实现。


== 其他 ==

=== Sample工程代码运行时出错 ===

错误如下：

{{{
06:38:33,156 WARN  [BasicResourcePool] com.mchange.v2.resourcepool.BasicResourcePool$AcquireTask@1e146ca 
-- Acquisition Attempt Failed!!! Clearing pending acquires. 
While trying to acquire a needed new resource, we failed to succeed more than the maximum number of allowed acquisition attempts (30). 
Last acquisition attempt exception: 
java.sql.SQLException: No suitable driver
 at java.sql.DriverManager.getDriver(DriverManager.java:243)
 at com.mchange.v2.c3p0.DriverManagerDataSource.driver(DriverManagerDataSource.java:224)
 at com.mchange.v2.c3p0.DriverManagerDataSource.getConnection(DriverManagerDataSource.java:120)
}}}

 解答：这个问题是properties文件被IDE篡改引起的。重新从压缩包中取出bigVote.properties文件放入工程，用普通的Properties File Editor打开编辑。千万不要使用MyEclipse默认的高级Properties编辑器。出现这个错误的原因就是MyEclipse的高级编辑器自动合并了“名称相同的配置项”。由于我们的properties存在分组，名称相同的配置项是不能合并的。 


=== 为什么默认使用的c3p0和dbcp这两个链接池？===

 连接池这2个比较常见，所以支持了下这两个。
 
 以后也可能增加更多连接池的支持，也支持用户自己定义自己的池，详情请参看：[TutorialDatasourceProvider 自定义连接池实现]


=== 支持JNDI吗？===

 guzz 1.3.1+ 支持。 

=== 主从读写分离是否只支持Mysql？ ===

 主从分离是指数据库在部署时按照master-slave模式部署，所有写操作写入master库，所以读操作从slave库操作，以降低主库的负载，实现多台数据库并行工作。

 如果只有1台数据库，可以忽略这个概念。使用api参看：[TutorialTranSession]

 主从大部分数据库都支持，可能名字不一样。比如在oracle中叫“镜像”之类的。Mysql配置主从的方法请参看：http://guzz.javaeye.com/blog/366508

 主从的概念就是1个库负责写入，然后把写入操作复制给其他库，维护1组数据库的数据是相同的。使用者可以从任意1台中读取数据，以达到数据库的水平扩展。


=== 如何设置读写？主库对应的可不可以是一个集群，然后从库对应的也是一个集群？=== 

 在guzz.xml中通过
{{{
<dbgroup name="log" masterDBConfigName="masterDB" slaveDBConfigName="slaveDB" dialectName="mysql5dialect" />
}}}

 指定masterDBConfigName和slaveDBConfigName对应的主从库，其他的都是内部自动处理的了。

 对于主从库能否为集群，主要看数据库支不支持。masterDB和slaveDB对应的都是配置文件里面的配置项。如果库支持集群，可以将配置项配置成集群的驱动以及IP列表等；如果是多台库轮循使用，可以配置多个数据库组（例如配置两个[slaveDB]就表示在这2台从库简轮询请求，轮询的策略是按照参数guzz.maxLoad的负载值均衡）。

 简单来说：1个配置项对应一个数据源（!DataSource），至于这个数据源是集群还是单库，对guzz来说是透明的。

 如果配置成多台机器轮询（如slave数据库轮询），guzz.xml是不要改动的（guzz.xml可以永远保持开发环境和正式环境只有1份），只要改动properties文件，大概配置的样子：

{{{
[slaveDB]
.....db1 

[slaveDB]
....db2

...

}}}


=== 用Guzz JSP Taglib 改动jsp后，可以不用重启应用服务器？*

 改动JSP是不需要重启应用服务器的，所有java应用服务器都支持。


=== 怎么调用存储过程？=== 
 
 通过ReadonlyTranSession或WriteTranSession的createJDBCTemplate获取JDBCTemplate。通过JDBCTemplate.getConnection()获取数据库连接，然后通过JDBC的调用方法进行调用。

 JDBCTemplate.getConnection()上进行的操作，将处在WriteTranSession的统一事务下管理。

 完成调用后，通过TranSession.close()方法关闭连接。
  


