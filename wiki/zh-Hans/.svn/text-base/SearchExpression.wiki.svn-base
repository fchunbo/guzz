== !SearchExpression： ==

 !SearchExpression 用于构造和组合查询条件，设置查询参数等。一般通过!SearchExpression中内置的静态方法构造。

=== 按照域对象类构造： ===

{{{
SearchExpression se = SearchExpression.forClass(Article.class) ;

SearchExpression se = SearchExpression.forClass(Article.class, pageNo, pageSize) ;

}}}

 读取某一页记录，如果不传入pageNo/pageSize参数，默认读取第1页的20条记录。

*注意：* 默认值目前是存储在静态变量中的，并且允许程序修改，但是请不要修改！这类数据以后会存放到配置文件中，目前实现方式将作废。

 如果需要读取某条件下的所有记录，则需要按照如下方式构造：

{{{
SearchExpression se = SearchExpression.forLoadAll(Article.class) ;
}}}

=== 按照businessName构造： ===

 类似于按照域对象类进行构造，传入的参数为guzz.xml中定义的business/name。也可以使用类的完整类名。

 例如：

{{{
SearchExpression se = SearchExpression.forBusiness("blogArticle", pageNo, pageSize) ;
}}}

 SearchExpression的查询条件，通过SearchTerm进行拼装。

=== SearchExpression API： ===

* setOrderBy：*
  设置排序方式。设置的字段内容必须全部为java property，不能包含数据库 column name。多个排序条件之间以英文逗号分割，如：id asc, createdTime desc
 
* setCountSelectPhrase：*
 SearchExpression通过此方法设置count操作的查询对象，默认为count(*)。例如可以为：count(id), sum(score) 等。

* setSkipCount：*
 设置跳过的记录数，对list和page查询有效。例如设置为5，查询第1页20条记录，实际记录将从结果集的第6条记录开始读取，并且读取20条。默认值为0不跳过任何记录。

* setPageFlipClass：*
 设置处理翻页用的PageFlip类，设置的类仅对page操作有效，并且仅对本SearchExpression查询有效。新的设置的类必须拥有默认的构造函数，并且继承自PageFlip类。

* setCondition：*
 设置查询条件。用于sql语句 where 后面的句子，不包括关键词“where”。在SearchExpression无法精确控制查询条件时，可以使用自己构造的查询条件。

* setLoadRecords:*
 设置在进行page操作时，是否加载数据。或许您已经通过cache等其他途径获得了数据。

* setComputeRecordNumber：*
 设置在page操作时，是否执行count查询获得记录总数。或许您已经通过cache等其他途径获得了数据。

=== 用SearchTerm构造查询条件： ===

 SearchTerm可以直接通过实现类构造，也可以通过 org.guzz.orm.se.Terms 的静态方法生成（推荐尽量使用此方法）。

 SearchTerm可以理解为对sql语句的拼接，没有任何面向对象的理念，仅仅是将需要的sql语句起来。类似!StringBuffer将很多元素append到一起来。

 SearchTerm在构造时，传入的属性名都必须是pojo对象的java属性，没有任何地方需要写数据库中的字段名称。

 !SearchTerm存放于org.guzz.orm.se package下。

* 目前主要的SearchTerm有：*

 * !AndTerm 查询and操作。public !AndTerm(!SearchTerm leftTerm, !SearchTerm rightTerm)，传入两个需要执行and查询条件。

 * !CompareTerm 比较条件。public !CompareTerm(String propName, String operator ,Object propValue)；属性+操作符+属性值，操作符定义在CompareTerm的静态变量中。

 * !ConcatTerm 连接操作。public !ConcatTerm(!SearchTerm leftTerm, !SearchTerm rightTerm)，将左右2个条件的sql表达式连接在一起。内部使用。

 * !InTerm in查询条件。public !InTerm(String propName, List/int[] values) 执行数据库in查询。

 * !OrderByTerm 数据库order by语句。 public !OrderByTerm(String orderBy)，排序条件，多个之间用英文逗号分隔。

 * !OrTerm or查询条件。public !OrTerm (!SearchTerm leftTerm, !SearchTerm rightTerm)。guzz标签不支持or操作，如果要进行或查询只能通过OrTerm进行。

 * !PropsSelectTerm 指定查询字段语句。一般不需要直接使用，可以通过!SearchExpression.setSelectedProps(String selectedProps)隐含调用，如："id, name" 则进行数据库查询时，只读取与id,name属性对应的字段。一般内部使用。

 * !StringCompareTerm 字符串匹配条件。public !StringCompareTerm(String propName, String operator, String propValue, boolean ignoreCase)，支持like查询和忽略大小写（通过追加low(xxx)函数实现）查询。

 * !WhereTerm 拼接where语句。public !WhereTerm(!SearchTerm condition)。内部使用。

 对于大部分的SearchTerm不建议直接使用，推荐通过Terms静态方法和SearchExpression提供的方法进行操作。
 
 例如我们需要添加userId=7并且状态为deleted的查询条件，则：
{{{
 se.and(Terms.eq("userId", 7)) ;
 se.and(Terms.eq("status", "deleted")) ;
}}}

== 更加复杂的查询： ==

 对于复杂的查询语句，guzz推荐将查询语句配置到guzz.xml中，通过id查询，类似ibatis。这部分内容一般是以后dba可能会关注的。

 对于比较奇特但不会有改动的查询，建议构造CompiledSQL进行。

*在guzz.xml中的配置方式：*
 
  对于[TutorialGuzzXml]中的guzz.xml配置，以下例子演示了如何调用id为listCommentsByName的查询。
 
 {{{
	HashMap params = new HashMap() ;
	params.put("userName", "lily") ;
	
	List<Comment> comments = session.list("listCommentsByName", params, 1, 100) ;
 }}}
 
*在程序中构造CompiledSQL的方式：*
 
  获取!TransactionManager，然后获取CompiledSQLBuilder，调用buildCompiledSQL方法，例如：
 
 {{{
 	private CompiledSQL deleteFriendActionsSQL ;
 
 	//初始化的时候编译SQL，并保存起来。
 	public void startup() {
		//delete a friend's friendActions when un-followed.
		this.deleteFriendActionsSQL = tm.getCompiledSQLBuilder().buildCompiledSQL(FriendsAction.class, 
				"delete from @@" + FriendsAction.class.getName() + " where @copiedFrom = :copiedFrom and @owner = :owner"
				);
				
		//绑定参数名和对应的java属性，以确定参数的数据类型。
		this.deleteFriendActionsSQL.addParamPropMapping("copiedFrom", "copiedFrom") ;
		this.deleteFriendActionsSQL.addParamPropMapping("owner", "owner") ;
	}
	
	.....
	
	//实际运行代码。运行时绑定参数，然后执行。
	public void runDeleteXXX(String owner， String starName){
		BindedCompiledSQL bsql = this.deleteFriendActionsSQL.bind("copiedFrom", starName).bind("owner", owner) ;
		//用owner做分表参数
		bsql.setTableCondition(owner) ;
				
		WriteTranSession write = tm.openRWTran(true) ;
		
		try{
			//执行删除
			int rowsDeleted = write.executeUpdate(bsql) ;
			
			//通过计数器服务，降低统计计数。
			slowUpdateService.updateCount(UserActionsCount.class, owner, "friendsActionCount", owner, -rowsDeleted) ;
		}finally{
			write.close() ;
		}
 	}
 
 }}}
 
 
 
 
 
 
 
 